<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- spring中的依赖注入
        依赖注入：
            Dependency Injection
        IOC的作用：
            降低程序间的耦合(依赖关系)
        依赖关系的管理：
            交给spring维护
        在当前类中需要用到其他类的对象，由spring提供，我们只需在配置文件中说明
        依赖关系的维护称为依赖注入。

        能注入的数据有三类：
            基本类型和String
            其他bean类型（在配置文件中配置或注解过的bean）
            复杂类型/集合类型

        注入方式：
            1、使用构造函数提供
            2、使用set方法提供
            3、使用注解提供
    -->

    <!-- 构造函数注入：
        使用的标签：constructor-arg
        标签出现的位置：bean标签的内部
        标签中的属性
            type:用于指定要注入的数据的数据类型，是构造函数中某个或某些数据的数据类型
            index:用于指定要注入的数据构造函数中指定索引位置的参数赋值，位置从0开始
            name:用于指定给构造函数中指定名称的参数赋值
            ==========================以上用于指定给构造函数中哪个参数赋值============================
            value:用于提供string类型和基本类型的数据
            ref:用于指定其他的bean类型数据(指的是在spring的ioc核心容器中出现过的bean对象)

        优势：在获取bean对象时，注入数据是必须的操作，否则对象无法创建成功
        弊端：改变了bean对象的实例化方式，在创建对象时如果用不到这些数据也必须提供
     -->
    <bean id="accountService" class="com.impl.AccountServiceImpl">
        <constructor-arg name="name" value="泰斯特"></constructor-arg>
        <constructor-arg name="age" value="22"></constructor-arg>
        <constructor-arg name="birthday" ref="now"></constructor-arg>
    </bean>


    <!-- 配置一个日期对象 -->
    <bean id="now" class="java.util.Date"></bean>


    <!-- set注入 -->
    <!--
    name:用于指定所调用的set方法名
    value:用于提供string类型和基本类型的数据
    ref:用于指定其他的bean类型数据(指的是在spring的ioc核心容器中出现过的bean对象)

    优势：创建对象时没有明确限制，可以直接使用默认构造函数
    弊端：如果有某个成员必须有值，则获取对象时有可能set方法没有执行
     -->
    <bean id="accountService2" class="com.impl.AccountServiceImpl2">
        <property name="age" value="35"></property>
        <property name="name" value="老张"></property>
        <property name="birthday" ref="now"></property>
    </bean>

    <!-- 复杂类型的注入（集合的注入） -->
    <!--
        用于给List结构注入的标签
            list array set
        用于给Map结构注入的标签
            map props
        结构相同，标签可以互换
     -->
    <bean id="accountService3" class="com.impl.AccountServiceImpl3">
        <property name="myStrs">
            <array>
                <value>aaa</value>
                <value>abc</value>
                <value>aca</value>
            </array>
        </property>

        <property name="myList">
            <list>
                <value>cca</value>
                <value>abc</value>
                <value>aca</value>
            </list>
        </property>

        <property name="mySet">
            <set>
                <value>cca</value>
                <value>abc</value>
                <value>aca</value>
            </set>
        </property>

        <property name="myMap">
            <map>
                <entry key="testA" value="aaa"></entry>
                <entry key="testB">
                    <value>bbb</value>
                </entry>
            </map>
        </property>

        <property name="myProps">
            <props>
                <prop key="testC">ccc</prop>
                <prop key="testD">ddd</prop>
            </props>
        </property>


    </bean>
</beans>